
#include "stm32l4xx_hal.h"
#include "stm32l4xx.h"
#include <stdio.h>

#define BKP_FLAG 	0x8888

/*UART2 is connected on APB2 bus
 * PA2 = USART2_TX
 * PA3 = USART2_RX
 */
UART_HandleTypeDef huart2;
RTC_HandleTypeDef rtc_handle;
char msg[20] = "Hello All Welcome\r\n";

void uart_init(void);
void Error_Handler(void);
void SystemClock_Config(void);

int main()
{
	HAL_Init();
	uart_init();

	__HAL_RTC_RESET_HANDLE_STATE(&rtc_handle);
	rtc_init();
	while(1)
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, 20, 100);
		HAL_Delay(500);
	}
}

void rtc_init(void)
{
	//Select RTC Clock

	RCC_OscInitTypeDef RCC_Osc;
	RCC_PeriphCLKInitTypeDef RCC_pclk;

	//Turn on LSI and Turn off LSE
	RCC_Osc.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
	RCC_Osc.LSEState = RCC_LSE_OFF;
	RCC_Osc.LSIState = RCC_LSI_ON;

	HAL_RCC_OscConfig(&RCC_Osc);

	//Set RTC clock src to LSI
	RCC_pclk.PeriphClockSelection = RCC_PERIPHCLK_RTC;
	RCC_pclk.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;

	HAL_RCCEx_PeriphCLKConfig(&RCC_pclk);

	//Enable RTC clock
	__HAL_RCC_RTC_ENABLE();

	//Configure Calender

	rtc_handle.Instance = RTC;
	rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
	rtc_handle.Init.AsynchPrediv = 0x7F;	//127
	rtc_handle.Init.SynchPrediv = 0xF9;		//249
	rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;

	HAL_RTC_Init(&rtc_handle);

}

void rtc_calender_config(void)
{
	RTC_DateTypeDef datestruct;
	RTC_TimeTypeDef timestrcut;

	datestruct.Year = 0x25;
	datestruct.Month = RTC_MONTH_JUNE;
	datestruct.Date = 0x26;
	datestruct.WeekDay = RTC_WEEKDAY_THURSDAY;

	HAL_RTC_SetDate(&rtc_handle, &datestruct, RTC_FORMAT_BCD);

	timestrcut.Hours = 0x03;
	timestrcut.Minutes = 0x00;
	timestrcut.Seconds = 0x00;
	timestrcut.TimeFormat = RTC_HOURFORMAT12_AM;
	timestrcut.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	timestrcut.StoreOperation = RTC_STOREOPERATION_RESET;

	HAL_RTC_SetTime(&rtc_handle, &timestrcut, RTC_FORMAT_BCD);

	//Write to Backup Register
	HAL_RTCEx_BKUPWrite(&rtc_handle, RTC_BKP_DR0, BKP_FLAG);

}

void rtc_get_time_date(uint8_t *time, uint8_t *date)
{
	RTC_DateTypeDef datestruct;
	RTC_TimeTypeDef timestrcut;

	HAL_RTC_GetDate(&rtc_handle, &datestruct, RTC_FORMAT_BIN);
	HAL_RTC_GetTime(&rtc_handle, &timestrcut, RTC_FORMAT_BIN);

	sprintf((char*)time,"%02d:%02d:%02d",timestrcut.Hours,timestrcut.Minutes,timestrcut.Seconds);
	sprintf((char*)date,"%02d:%02d:%02d",datestruct.Date,datestruct.Month,datestruct.Year);
}

void uart_init(void)
{

	GPIO_InitTypeDef GPIO_InitStruct = {0};
	//Enable clock for UART pins
	__HAL_RCC_GPIOA_CLK_ENABLE();

	//Enable UART module clock access
	__HAL_RCC_USART2_CLK_ENABLE();

	//Configure GPIO pins as alternate functionality pins for UART2
	GPIO_InitStruct.Pin   = GPIO_PIN_2 | GPIO_PIN_3;
	GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull  = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	  huart2.Instance = USART2;
	  huart2.Init.BaudRate = 115200;
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
	  huart2.Init.StopBits = UART_STOPBITS_1;
	  huart2.Init.Parity = UART_PARITY_NONE;
	  huart2.Init.Mode = UART_MODE_TX_RX;
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
	  if (HAL_UART_Init(&huart2) != HAL_OK)
	  {
	    Error_Handler();
	  }

}

void SysTick_Handler(void)
{
	HAL_IncTick();
}
void Error_Handler(void)
{

}


