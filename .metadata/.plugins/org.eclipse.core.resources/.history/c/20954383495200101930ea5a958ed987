
#include "stm32l4xx_hal.h"
#include "stm32l4xx.h"
#include <stdio.h>


/*UART2 is connected on APB2 bus
 * PA2 = USART2_TX
 * PA3 = USART2_RX
 */
UART_HandleTypeDef huart2;
char msg[20] = "Hello All Welcome\r\n";

void uart_init(void);
void Error_Handler(void);
void SystemClock_Config(void);

int _write(int file,char *ptr,int len)

{

	    int i=0;

	    for(i=0;i<len;i++)

	    	ITM_SendChar((*ptr++));

	    return len;

}

int main()
{
	HAL_Init();
	SystemClock_Config();
	uart_init();
	while(1)
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)&msg, 20, 100);
		printf("UART Transmit\n");
		HAL_Delay(500);
	}
}

void uart_init(void)
{

	GPIO_InitTypeDef GPIO_InitStruct = {0};
	//Enable clock for UART pins
	__HAL_RCC_GPIOA_CLK_ENABLE();

	//Enable UART module clock access
	__HAL_RCC_USART2_CLK_ENABLE();

	//Configure GPIO pins as alternate functionality pins for UART2
	GPIO_InitStruct.Pin   = GPIO_PIN_2 | GPIO_PIN_3;
	GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull  = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);


//	//COnfigure UART module
//	huart2.Instance = USART2;
//	huart2.Init.BaudRate = 9600;
//	huart2.Init.WordLength = UART_WORDLENGTH_8B;
//	huart2.Init.StopBits = UART_STOPBITS_1;
//	huart2.Init.Mode = UART_MODE_TX;
//	huart2.Init.Parity = UART_PARITY_NONE;
//	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
//	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
//
//	HAL_UART_Init(&huart2);

	  huart2.Instance = USART2;
	  huart2.Init.BaudRate = 115200;
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
	  huart2.Init.StopBits = UART_STOPBITS_1;
	  huart2.Init.Parity = UART_PARITY_NONE;
	  huart2.Init.Mode = UART_MODE_TX_RX;
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
	  if (HAL_UART_Init(&huart2) != HAL_OK)
	  {
	    Error_Handler();
	  }

}
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    /** Supply configuration update enable */
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);  // Required for high freq

    /** Initializes the CPU, AHB and APB busses clocks */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS; // MCO from ST-Link
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLM = 1;
    RCC_OscInitStruct.PLL.PLLN = 20;
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2; // 8/1*20/2 = 80 MHz
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7; // Not used
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2; // Optional (for USB, RNG etc.)

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    {
        Error_Handler();
    }

    /** Initializes the CPU, AHB and APB busses clocks */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; // Use PLL as system clock
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
    {
        Error_Handler();
    }

    // Update SysTick to reflect new frequency
    HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
}
void SysTick_Handler(void)
{
	HAL_IncTick();
}
void Error_Handler(void)
{

}


